#!/usr/bin/env python3
"""
Module for running multiple shell commands concurrently and streaming their output in real-time.
"""

import subprocess
import threading
import sys
import time


def run_commands_concurrently(commands_list):
    """
    Runs a list of commands concurrently and displays their output in real time
    
    Args:
        commands_list: List of strings, each representing a shell command to run
    """
    # Lock for synchronized console printing
    print_lock = threading.Lock()
    
    # List to track all threads
    threads = []
    
    def run_command_and_stream_output(command, command_index):
        """
        Runs a single command and streams its output in real time
        
        Args:
            command: String representing a shell command
            command_index: Index/identifier of the command for display
        """
        prefix = f"Command[{command_index}]"
        
        # Run the command with pipes for stdout and stderr
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            shell=True,
            bufsize=1  # Line buffering - for real-time output
        )
        
        def stream_output(stream, stream_name):
            """
            Reads from a stream and prints each line with the appropriate prefix
            
            Args:
                stream: Stream to read from (stdout or stderr)
                stream_name: Name of the stream for display
            """
            for line in stream:
                line = line.rstrip('\n')
                with print_lock:
                    print(f"{prefix} {stream_name}: {line}")
                    sys.stdout.flush()
        
        # Create separate threads for stdout and stderr
        stdout_thread = threading.Thread(
            target=stream_output, 
            args=(process.stdout, "stdout")
        )
        stderr_thread = threading.Thread(
            target=stream_output, 
            args=(process.stderr, "stderr")
        )
        
        # Set threads as daemon so they exit when the main program exits
        stdout_thread.daemon = True
        stderr_thread.daemon = True
        
        # Start the output reading threads
        stdout_thread.start()
        stderr_thread.start()
        
        # Wait for the process to complete
        return_code = process.wait()
        
        # Wait for output threads to finish reading
        stdout_thread.join()
        stderr_thread.join()
        
        with print_lock:
            print(f"{prefix} completed with return code: {return_code}")
    
    # Create and start a thread for each command
    for i, command in enumerate(commands_list):
        thread = threading.Thread(
            target=run_command_and_stream_output, 
            args=(command, i)
        )
        threads.append(thread)
        thread.start()
    
    # Wait for all command threads to complete
    for thread in threads:
        thread.join()
    
    print("All commands have completed execution")


# Example usage
if __name__ == "__main__":
    commands = [
        "ls -la",
        "ping -c 5 google.com",
        "echo 'Starting sleep' && sleep 3 && echo 'Finished sleep'",
        "find /usr -name 'python*' -type f 2>/dev/null | head -n 5"
    ]
    
    run_commands_concurrently(commands)
