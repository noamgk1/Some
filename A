#!/usr/bin/env python3
"""
CSV Merger Script

This script takes two CSV file paths as command-line arguments,
verifies their existence, checks if they have the same columns,
merges them, and saves the combined result in the current directory.
This version uses only standard Python libraries (no pandas).
"""

import os
import sys
import csv
import argparse
from pathlib import Path


def validate_file_exists(file_path):
    """
    Validates if the specified file exists.
    
    Args:
        file_path (str): Path to the file to validate
        
    Returns:
        bool: True if file exists, otherwise raises FileNotFoundError
    """
    if not os.path.isfile(file_path):
        raise FileNotFoundError(f"File not found: {file_path}")
    return True


def get_csv_columns(file_path):
    """
    Reads the header row from a CSV file to determine its columns.
    
    Args:
        file_path (str): Path to the CSV file
        
    Returns:
        list: Column names from the CSV file
    """
    with open(file_path, 'r', newline='', encoding='utf-8') as csv_file:
        csv_reader = csv.reader(csv_file)
        try:
            # Get the header row (first row)
            header = next(csv_reader)
            return header
        except StopIteration:
            raise ValueError(f"CSV file {file_path} is empty")


def check_columns_match(file1_path, file2_path):
    """
    Checks if two CSV files have the same columns.
    
    Args:
        file1_path (str): Path to the first CSV file
        file2_path (str): Path to the second CSV file
        
    Returns:
        bool: True if columns match, otherwise raises ValueError
    """
    header1 = get_csv_columns(file1_path)
    header2 = get_csv_columns(file2_path)
    
    if sorted(header1) != sorted(header2):
        raise ValueError("The CSV files have different columns")
    
    # Return the original order of columns from the first file
    return header1


def merge_csv_files(file1_path, file2_path, output_path):
    """
    Merges two CSV files into one.
    
    Args:
        file1_path (str): Path to the first CSV file
        file2_path (str): Path to the second CSV file
        output_path (str): Path where to save the merged file
        
    Returns:
        int: Number of rows written to the output file
    """
    # Validate files exist
    validate_file_exists(file1_path)
    validate_file_exists(file2_path)
    
    # Check if columns match and get column headers
    columns = check_columns_match(file1_path, file2_path)
    
    # Create the output file
    with open(output_path, 'w', newline='', encoding='utf-8') as output_file:
        writer = csv.writer(output_file)
        
        # Write header row
        writer.writerow(columns)
        
        # Counter for total rows written
        rows_written = 1  # 1 for the header
        
        # Process first file (skip header)
        with open(file1_path, 'r', newline='', encoding='utf-8') as csv_file:
            reader = csv.reader(csv_file)
            next(reader)  # Skip header
            for row in reader:
                writer.writerow(row)
                rows_written += 1
        
        # Process second file (skip header)
        with open(file2_path, 'r', newline='', encoding='utf-8') as csv_file:
            reader = csv.reader(csv_file)
            next(reader)  # Skip header
            for row in reader:
                writer.writerow(row)
                rows_written += 1
    
    return rows_written - 1  # Subtract 1 to exclude header row


def main():
    """
    Main function to process command-line arguments and execute the CSV merging.
    """
    parser = argparse.ArgumentParser(description='Merge two CSV files with identical columns.')
    parser.add_argument('file1', help='Path to the first CSV file')
    parser.add_argument('file2', help='Path to the second CSV file')
    parser.add_argument('-o', '--output', help='Output filename (default: merged_output.csv)', 
                       default='merged_output.csv')
    
    args = parser.parse_args()
    
    try:
        # Merge the CSV files
        rows_merged = merge_csv_files(args.file1, args.file2, args.output)
        
        output_path = Path(args.output)
        print(f"Successfully merged CSV files. {rows_merged} data rows written to: {output_path.absolute()}")
        
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
